---
title: "Matplotlib Visualization with Quarto"
author: "Rohit babu Mothukuri"
date: today
format: 
  html:
    theme: cosmo
    toc: true
    code-fold: true
execute:
  echo: true
  warning: false
  message: false
---

## Introduction

This document demonstrates how to create and publish matplotlib visualizations using Quarto. We'll create several example plots and render them to HTML.

## What is Matplotlib?

Matplotlib is a comprehensive Python library for creating static, animated, and interactive visualizations. It's one of the most popular plotting libraries in the Python ecosystem and serves as the foundation for many other visualization tools.

### Why Matplotlib is Useful:

- **Versatility**: Supports a wide range of plot types including line plots, scatter plots, bar charts, histograms, pie charts, and more
- **Publication Quality**: Produces high-quality figures suitable for academic papers, presentations, and reports
- **Customization**: Highly customizable with fine-grained control over every aspect of the plot
- **Integration**: Works seamlessly with NumPy, Pandas, and other scientific Python libraries
- **Cross-Platform**: Consistent output across different operating systems and environments
- **Professional Standards**: Industry-standard library used by data scientists, researchers, and analysts worldwide

## Simple Line Plot

Let's start with a basic line plot:

```{python}
#| label: fig-line-plot
#| fig-cap: "Simple line plot showing sine and cosine functions"
#| fig-width: 8
#| fig-height: 5

import matplotlib.pyplot as plt
import numpy as np

# Create data
x = np.linspace(0, 2*np.pi, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create the plot
plt.figure(figsize=(8, 5))
plt.plot(x, y1, label='sin(x)', linewidth=2)
plt.plot(x, y2, label='cos(x)', linewidth=2)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Sine and Cosine Functions')
plt.legend()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

## Scatter Plot with Data

Here's a scatter plot using pandas data:

```{python}
#| label: fig-scatter-plot
#| fig-cap: "Scatter plot showing random data points"
#| fig-width: 7
#| fig-height: 5

import pandas as pd
import numpy as np

# Generate random data
np.random.seed(42)
n_points = 100
data = pd.DataFrame({
    'x': np.random.randn(n_points),
    'y': np.random.randn(n_points),
    'category': np.random.choice(['A', 'B', 'C'], n_points)
})

# Create scatter plot
plt.figure(figsize=(7, 5))
colors = {'A': 'red', 'B': 'blue', 'C': 'green'}
for category in data['category'].unique():
    subset = data[data['category'] == category]
    plt.scatter(subset['x'], subset['y'], 
               c=colors[category], label=category, alpha=0.7)

plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('Scatter Plot by Category')
plt.legend()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

## Additional Random Scatter Plot

Here's another scatter plot with different random data points:

```{python}
#| label: fig-random-scatter
#| fig-cap: "Scatter plot with random data points and different colors"
#| fig-width: 8
#| fig-height: 6

import matplotlib.pyplot as plt
import numpy as np

# Generate random data with different distributions
np.random.seed(123)
n_points = 150

# Create three clusters of random data
x1 = np.random.normal(2, 0.8, 50)
y1 = np.random.normal(3, 0.8, 50)

x2 = np.random.normal(-1, 0.6, 50)
y2 = np.random.normal(-2, 0.6, 50)

x3 = np.random.normal(0, 1.2, 50)
y3 = np.random.normal(1, 1.2, 50)

# Combine all data
x_all = np.concatenate([x1, x2, x3])
y_all = np.concatenate([y1, y2, y3])
colors = ['red'] * 50 + ['blue'] * 50 + ['green'] * 50
sizes = np.random.uniform(20, 100, 150)

# Create the scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(x_all, y_all, c=colors, s=sizes, alpha=0.6, edgecolors='black', linewidth=0.5)

plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.title('Random Data Points with Different Clusters')
plt.grid(True, alpha=0.3)
plt.legend(['Cluster 1', 'Cluster 2', 'Cluster 3'], loc='upper right')
plt.tight_layout()
plt.show()
```

## Bar Chart

A simple bar chart example:

```{python}
#| label: fig-bar-chart
#| fig-cap: "Bar chart showing sample data"
#| fig-width: 8
#| fig-height: 5

# Sample data
categories = ['Category A', 'Category B', 'Category C', 'Category D']
values = [23, 45, 56, 78]

# Create bar chart
plt.figure(figsize=(8, 5))
bars = plt.bar(categories, values, color=['skyblue', 'lightgreen', 'lightcoral', 'gold'])
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Sample Bar Chart')
plt.xticks(rotation=45)

# Add value labels on bars
for bar, value in zip(bars, values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
             str(value), ha='center', va='bottom')

plt.tight_layout()
plt.show()
```

## Pie Chart with Sample Data

Here's a pie chart showing sample data distribution:

```{python}
#| label: fig-pie-chart
#| fig-cap: "Pie chart showing sample data distribution"
#| fig-width: 8
#| fig-height: 6

import matplotlib.pyplot as plt

# Sample data for different categories
categories = ['Technology', 'Healthcare', 'Finance', 'Education', 'Retail', 'Manufacturing']
values = [35, 20, 15, 12, 10, 8]
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99cc', '#c2c2f0']

# Create pie chart
plt.figure(figsize=(8, 6))
wedges, texts, autotexts = plt.pie(values, labels=categories, colors=colors, 
                                  autopct='%1.1f%%', startangle=90, 
                                  explode=(0.05, 0, 0, 0, 0, 0))

# Customize the appearance
plt.setp(autotexts, size=10, weight="bold")
plt.setp(texts, size=12)

# Add title
plt.title('Sample Data Distribution by Category', fontsize=16, fontweight='bold', pad=20)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')
plt.tight_layout()
plt.show()
```

## Multiple Subplots

Here's an example with multiple subplots:

```{python}
#| label: fig-subplots
#| fig-cap: "Multiple subplots in one figure"
#| fig-width: 10
#| fig-height: 6

# Create figure with subplots
fig, axes = plt.subplots(2, 2, figsize=(10, 6))
fig.suptitle('Multiple Subplots Example', fontsize=16)

# Subplot 1: Line plot
x = np.linspace(0, 10, 100)
axes[0, 0].plot(x, np.sin(x))
axes[0, 0].set_title('Sine Wave')
axes[0, 0].grid(True, alpha=0.3)

# Subplot 2: Histogram
data = np.random.normal(0, 1, 1000)
axes[0, 1].hist(data, bins=30, alpha=0.7, color='skyblue')
axes[0, 1].set_title('Normal Distribution')
axes[0, 1].grid(True, alpha=0.3)

# Subplot 3: Pie chart
sizes = [30, 25, 20, 15, 10]
labels = ['A', 'B', 'C', 'D', 'E']
axes[1, 0].pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
axes[1, 0].set_title('Pie Chart')

# Subplot 4: Box plot
data_box = [np.random.normal(0, std, 100) for std in range(1, 4)]
axes[1, 1].boxplot(data_box, labels=['Group 1', 'Group 2', 'Group 3'])
axes[1, 1].set_title('Box Plot')
axes[1, 1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

## Conclusion

This document demonstrates various matplotlib visualizations that can be easily rendered to HTML using Quarto. The plots are interactive and will display beautifully in the final HTML output.

To render this document to HTML, use the command:
```bash
quarto render index.qmd
```

Or in VS Code, you can use the Quarto extension to render with a single click.
